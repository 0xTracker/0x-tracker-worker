const timekeeper = require('timekeeper');

const { publishJob } = require('../../queues');
const createTransformedERC20EventFills = require('.');
const Event = require('../../model/event');
const testUtils = require('../../test-utils');
const Transaction = require('../../model/transaction');

jest.mock('../../queues');

beforeAll(async () => {
  await testUtils.setupDb();
}, 30000);

afterEach(async () => {
  await testUtils.resetDb();
  timekeeper.reset();
  jest.clearAllMocks();
}, 30000);

afterAll(async () => {
  await testUtils.tearDownDb();
}, 30000);

const mockOptions = {
  logger: testUtils.mockLogger,
};

describe('consumers/create-transformed-erc20-event-fills', () => {
  it('should consume fill processing queue', () => {
    expect(createTransformedERC20EventFills.queueName).toBe('fill-processing');
  });

  it('should consume create-transformed-erc20-event-fills jobs', () => {
    expect(createTransformedERC20EventFills.jobName).toBe(
      'create-transformed-erc20-event-fills',
    );
  });

  it('should throw an error when the specified eventId is invalid', async () => {
    const job = { data: { eventId: 'yadda' } };

    expect(
      createTransformedERC20EventFills.fn(job, mockOptions),
    ).rejects.toThrow(new Error('Invalid eventId: yadda'));
  });

  it('should throw an error when the specified event does not exist', async () => {
    const job = { data: { eventId: '5f377f6a83c00016fed0d17a' } };

    expect(
      createTransformedERC20EventFills.fn(job, mockOptions),
    ).rejects.toThrow(new Error('Cannot find event: 5f377f6a83c00016fed0d17a'));
  });

  it('should throw an error when the associated transaction contains multiple TransformedERC20 events', async () => {
    await Event.create([
      {
        _id: '5f2e9c576b2c7f29ee87cf7a',
        protocolVersion: 3,
        blockNumber: 10415496,
        data: {
          inputToken: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
          inputTokenAmount: '50000000',
          outputToken: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
          outputTokenAmount: '208673471330773057',
          taker: '0x8b58750df7d41f91a281a496e160a827fdc4de0a',
        },
        dateIngested: new Date('2020-08-08T12:36:39.660Z'),
        logIndex: 141,
        transactionHash:
          '0xaa4b893152c32279ff7090f88e9388034d60d980a2c480c0664c61458cc4d9c9',
        type: 'TransformedERC20',
      },
      {
        _id: '5f2e9c576b2c7f29ee87cf7b',
        protocolVersion: 3,
        blockNumber: 10422135,
        data: {
          inputToken: '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',
          inputTokenAmount: '100000000000000000',
          outputToken: '0xc00e94cb662c3520282e6f5717214004a7f26888',
          outputTokenAmount: '133654917647375782',
          taker: '0x0000001cd3a26c74eceb9938790cf1c054c0ebbf',
        },
        dateIngested: new Date('2020-08-08T12:36:39.661Z'),
        logIndex: 102,
        transactionHash:
          '0xaa4b893152c32279ff7090f88e9388034d60d980a2c480c0664c61458cc4d9c9',
        type: 'TransformedERC20',
      },
    ]);

    const job = { data: { eventId: '5f2e9c576b2c7f29ee87cf7b' } };

    await expect(
      createTransformedERC20EventFills.fn(job, mockOptions),
    ).rejects.toThrow(
      new Error(
        'Transaction contains multiple TransformedERC20 events: 0xaa4b893152c32279ff7090f88e9388034d60d980a2c480c0664c61458cc4d9c9',
      ),
    );
  });

  it('should reschedule job processing when associated transaction has not been fetched', async () => {
    await Event.create([
      {
        _id: '5f2e9c576b2c7f29ee87cf7a',
        protocolVersion: 3,
        blockNumber: 10415496,
        data: {
          inputToken: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
          inputTokenAmount: '50000000',
          outputToken: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
          outputTokenAmount: '208673471330773057',
          taker: '0x8b58750df7d41f91a281a496e160a827fdc4de0a',
        },
        dateIngested: new Date('2020-08-08T12:36:39.660Z'),
        logIndex: 141,
        transactionHash:
          '0xaa4b893152c32279ff7090f88e9388034d60d980a2c480c0664c61458cc4d9c9',
        type: 'TransformedERC20',
      },
    ]);

    timekeeper.freeze('2020-08-08T12:38:00.660Z');

    const job = { data: { eventId: '5f2e9c576b2c7f29ee87cf7a' } };

    await createTransformedERC20EventFills.fn(job, mockOptions);

    expect(publishJob).toHaveBeenCalledTimes(1);
    expect(publishJob).toHaveBeenCalledWith(
      'fill-processing',
      'create-transformed-erc20-event-fills',
      {
        eventId: '5f2e9c576b2c7f29ee87cf7a',
      },
      {
        delay: 30000,
      },
    );
  });

  it('should log a warning if event was ingested more than five minutes ago and aassociated transaction still not fetched', async () => {
    await Event.create([
      {
        _id: '5f2e9c576b2c7f29ee87cf7a',
        protocolVersion: 3,
        blockNumber: 10415496,
        data: {
          inputToken: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
          inputTokenAmount: '50000000',
          outputToken: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
          outputTokenAmount: '208673471330773057',
          taker: '0x8b58750df7d41f91a281a496e160a827fdc4de0a',
        },
        dateIngested: new Date('2020-08-08T12:36:39.660Z'),
        logIndex: 141,
        transactionHash:
          '0xaa4b893152c32279ff7090f88e9388034d60d980a2c480c0664c61458cc4d9c9',
        type: 'TransformedERC20',
      },
    ]);

    timekeeper.freeze('2020-08-08T12:42:00.660Z');

    const job = { data: { eventId: '5f2e9c576b2c7f29ee87cf7a' } };

    await createTransformedERC20EventFills.fn(job, mockOptions);

    expect(mockOptions.logger.warn).toHaveBeenCalledTimes(1);
    expect(mockOptions.logger.warn).toHaveBeenCalledWith(
      'transaction not found for event: 5f2e9c576b2c7f29ee87cf7a',
    );
  });

  it('should finish job early and log outcome when event has no associated ERC20BridgeTransfer events', async () => {
    await Event.create([
      {
        _id: '5f2e9c576b2c7f29ee87cf7a',
        protocolVersion: 3,
        blockNumber: 10415496,
        data: {
          inputToken: '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
          inputTokenAmount: '50000000',
          outputToken: '0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
          outputTokenAmount: '208673471330773057',
          taker: '0x8b58750df7d41f91a281a496e160a827fdc4de0a',
        },
        dateIngested: new Date('2020-08-08T12:36:39.660Z'),
        logIndex: 141,
        transactionHash:
          '0xaa4b893152c32279ff7090f88e9388034d60d980a2c480c0664c61458cc4d9c9',
        type: 'TransformedERC20',
      },
    ]);

    await Transaction.create({
      hash:
        '0xaa4b893152c32279ff7090f88e9388034d60d980a2c480c0664c61458cc4d9c9',
      affiliateAddress: '0x1000000000000000000000000000000000000011',
      blockHash:
        '0xda729c2ac56536cbf88ec0a88eba7f28cb5db66dcde2e20829e972023ae68d80',
      blockNumber: 10415496,
      data:
        '0x415565b0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000002cdc0c56d19239800000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000007c000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000066000000000000000000000000000000000000000000000000000000000000007800000000000000000000000000000000000000000000000000000000002faf080000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000260000000000000000000000000bb004090d26845b672f17c6da4b7d162df3bfc5e00000000000000000000000022f9dcf4647084d6c31b2765f6910cd85c178c180000000000000000000000001000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e55b6aa4b7e8410000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f050ede000000000000000000000000000000000000000000000000000001732bbd832000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000000000000000000000036691c4f426eb8f42f150ebde43069a31cb080ad00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002cdc0c56d1923980000000000000000000000000000000000000000000000000000000002faf08000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005f0529d31c4427f53ec3c2fd10cbdde1226fecffaac9180d91a8a2a9e2a308ef623e0c3f00000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000002a00000000000000000000000000000000000000000000000000000000000000420000000000000000000000000000000000000000000000000000000000000042000000000000000000000000000000000000000000000000000000000000000a4dc1600f3000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000036691c4f426eb8f42f150ebde43069a31cb080ad00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000020000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000024f47261b0000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000421c19165fa23af77cc09979e52a8f350c3f08e4a79a4e2b9045ec7036910eec07c505aaa8030aa674135cbe3dd1bdc35daf78a24137626186ed32e68a0d12848cc00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd0000000000000000000000001000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000005f050db4',
      date: new Date('2020-07-08T00:06:01.000Z'),
      from: '0x8B58750df7D41F91a281A496e160A827fdc4De0A',
      gasLimit: 605952,
      gasPrice: '20100000000',
      gasUsed: 350319,
      index: 91,
      nonce: '35',
      quoteDate: new Date('2020-07-08T00:05:08.000Z'),
      to: '0xDef1C0ded9bec7F1a1670819833240f027b25EfF',
      value: '6030000000000000',
    });

    const job = { data: { eventId: '5f2e9c576b2c7f29ee87cf7a' } };

    await createTransformedERC20EventFills.fn(job, mockOptions);

    expect(mockOptions.logger.info).toHaveBeenCalledTimes(1);
    expect(mockOptions.logger.info).toHaveBeenCalledWith(
      'TransformedERC20 event has no associated ERC20BridgeTransfer events: 5f2e9c576b2c7f29ee87cf7a',
    );
  });
});
